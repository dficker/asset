<?php

/**
 * @file
 * Module for the Asset Entity - a starting point to create your own Entity
 * and associated administration interface
 */

/**
 * Implements hook_menu
 *
 * @author JaceRider
 */
function asset_menu(){
  foreach (asset_get_types() as $type) {
    $asset = asset_create(array('type' => $type->type));
    $items['asset/browser/'.$type->type.'/%'] = array(
      'page callback' => 'asset_browser',
      'page arguments' => array($asset,3),
      'access callback' => 'asset_access',
      'access arguments' => array('view', $type),
      'file' => 'asset.page.inc',
      'type' => MENU_CALLBACK
    );
  }
  $items['admin/config/content/asset'] = array(
    'title' => 'Assets',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asset_settings'),
    'access arguments' => array('administer assets'),
    'file' => 'asset.admin.inc',
    'description' => t('Configure assets.')
  );
  $items['admin/config/content/asset/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  return $items;
}


/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function asset_entity_info() {
  $return['asset'] = array(
    'label' => t('Asset'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'Asset',
    'controller class' => 'AssetController',
    'base table' => 'asset',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'id',
        'bundle' => 'type',
        'label' => 'name',
    ),
    // Bundles are defined by the asset types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'asset_create',
    'access callback' => 'asset_access',
    'module' => 'asset',
    'inline entity form' => array(
      'controller' => 'AssetInlineEntityFormController',
    ),
    'view modes' => array(
      'default' => array(
        'label' => t('Default'),
        'custom settings' => TRUE
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE
      ),
    ),
    // The information below is used by the AssetUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/assets',
      'file' => 'asset.admin.inc',
      'controller class' => 'AssetUIController',
      'menu wildcard' => '%asset',
    ),
  );
  // The entity that holds information about the entity types
  $return['asset_type'] = array(
    'label' => t('Asset Type'),
    'entity class' => 'AssetType',
    'controller class' => 'AssetTypeController',
    'base table' => 'asset_type',
    'fieldable' => FALSE,
    'bundle of' => 'asset',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'asset_type_access',
    'module' => 'asset',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/asset_types',
      'file' => 'asset_type.admin.inc',
      'controller class' => 'AssetTypeUIController',
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the asset types via a hook to avoid a recursion
 * issue as loading the asset types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function asset_entity_info_alter(&$entity_info) {
  foreach (asset_get_types() as $type => $info) {
    $entity_info['asset']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/asset_types/manage/%asset_type',
        'real path' => 'admin/structure/asset_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer asset types'),
      ),
    );


    if($view_modes = variable_get('asset_view_modes', FALSE)){
      foreach($view_modes as $key => $label){
        $entity_info['asset']['view modes'][$key] = array(
          'label' => t($label),
          'custom settings' => FALSE
        );
      }
    }
  }
}


/**
 * Implements hook_permission().
 */
function asset_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer asset types' => array(
      'title' => t('Administer asset types'),
      'description' => t('Create and delete fields for asset types, and set their permissions.'),
    ),
    'administer assets' => array(
      'title' => t('Administer assets'),
      'description' => t('Edit and delete all assets'),
    ),
  );

  //Generate permissions per asset
  foreach (asset_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name asset" => array(
        'title' => t('%type_name: Edit any asset', array('%type_name' => $type->label)),
      ),
      "view any $type_name asset" => array(
        'title' => t('%type_name: View any asset', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}

/**
 * Get all asset token matches
 *
 * @param  $assets_load
 *   If true, load the full asset object.
 *
 * @author JaceRider
 */
function asset_token_find($text, $assets_load = FALSE){
  $assets = array();
  if (!empty($text)) {
    $pattern = '/(\[asset-[0-9]+(-[0-9]+)?\])/i';
    preg_match_all($pattern, $text, $matches);
    if(!empty($matches[0])){
      foreach($matches[0] as $match){
        $pattern = '/\[asset-([0-9]+)-?([0-9]+)?\]/i';
        preg_match($pattern, $match, $m);
        $asset_id = $key = $m[1];
        $instance_id = !empty($m[2]) ? $m[2] : 0;
        $asset = $assets_load ? asset_load($asset_id) : NULL;
        $assets[$asset_id . '-' . $instance_id] = array(
          'aid' => $asset_id,
          'iid' => $instance_id,
          'asset' => $asset,
          'token' => $match
        );
      }
    }
  }
  return $assets;
}

/**
 * Replace all tokens with their matching assets.
 */
function asset_token_replace($text, $view_mode = 'full'){
  $assets = asset_token_find($text, TRUE);
  foreach($assets as $aid => $vars){
    $view = asset_render($vars['asset'], $view_mode = 'full');
    $text = str_replace($vars['token'], drupal_render($view), $text);
  }
  return $text;
}


/**
 * Determines whether the given user has access to a asset.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $asset
 *   Optionally a asset or a asset type to check access for. If nothing is
 *   given, access for all assets is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function asset_access($op, $asset = NULL, $account = NULL) {
 if (empty($account)) {
   global $user;
   $account = $user;
 }

  if (user_access('administer assets', $account)) {
    return TRUE;
  }
  if (isset($asset) && is_object($asset) && $type_name = $asset->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name asset", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function asset_form_field_ui_display_overview_form_alter(&$form, &$form_state){
  if($form['#entity_type'] == 'asset'){
    $form['asset_modes'] = array(
      '#type' => 'fieldset',
      '#title' => t('Asset View Modes'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
      '#description' => t('View modes are shared across all entity types.')
    );
    $bundle = $form['#bundle'];
    $asset_type = $form['#asset_type'] = asset_type_load($bundle);

    $form['asset_modes']['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Create new view mode'),
      '#maxlength' => 255,
    );
    $form['asset_modes']['machine_name'] = array(
      '#type' => 'machine_name',
      '#title' => t('Machine name'),
      '#required' => FALSE,
      '#machine_name' => array(
        'exists' => 'asset_form_field_ui_display_overview_form_alter_exists',
        'source' => array('asset_modes', 'name'),
      )
    );

    $view_modes = variable_get('asset_view_modes');
    if($view_modes && is_array($view_modes)){
      $form['asset_modes']['remove'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Remove view modes'),
        '#options' => $view_modes,
      );
    }


    // // $form['asset']['asset'] = '';
    // module_load_include('inc', 'asset_instance', 'asset_instance.admin');
    // $instance = asset_instance_load_with_type(0, $instance_type);
    // $instance->lock = true;
    // asset_instance_form_fields($fieldset, $instance, $instance_type);
    $form['#submit'][] = 'asset_form_field_ui_display_overview_form_alter_submit';
  }
}

function asset_form_field_ui_display_overview_form_alter_exists($value) {
  $entity_info = entity_get_info('asset');
  return isset($entity_info['view modes'][$value]);
}

function asset_form_field_ui_display_overview_form_alter_submit($form, &$form_state){
  if(!empty($form_state['values']['asset_modes'])){
    $values = $form_state['values']['asset_modes'];
    $asset_type = $form['#asset_type'];
    $view_modes = variable_get('asset_view_modes', array());
    $changed = FALSE;
    if(!empty($values['name']) && !empty($values['machine_name'])){
      $changed = TRUE;
      drupal_set_message(t('View mode %view_mode has been created.', array('%view_mode' => $values['name'])));
      $view_modes[$values['machine_name']] = $values['name'];
      // Enable this view mode on this asset type.
      if($settings = variable_get('field_bundle_settings_asset__' . $asset_type->type)){
        $settings['view_modes'][$values['machine_name']] = array('custom_settings' => TRUE);
        variable_set('field_bundle_settings_asset__' . $asset_type->type, $settings);
      }
    }
    if(!empty($values['remove']) && is_array($values['remove'])){
      foreach($values['remove'] as $view_mode => $remove){
        if($remove){
          $changed = TRUE;
          drupal_set_message(t('View mode %view_mode has been removed.', array('%view_mode' => $view_modes[$view_mode])));
          unset($view_modes[$view_mode]);
          // Delete all settings for this view mode.
          foreach (asset_get_types() as $type => $info) {
            if($settings = variable_get('field_bundle_settings_asset__' . $type)){
              unset($settings['view_modes'][$view_mode]);
              variable_set('field_bundle_settings_asset__' . $type, $settings);
            }
          }
        }
      }
    }
    if($changed){
      variable_set('asset_view_modes', $view_modes);
      entity_info_cache_clear();
      menu_rebuild();
    }
  }
}


/**
 * Inline entity form "add existing" alter
 */
function asset_inline_entity_form_reference_form_alter(&$form, &$form_state){
  module_load_include('inc', 'asset', 'asset.inline_entity_form');
  _asset_inline_entity_form_reference_form_alter($form, $form_state);
}


/**
 * Access callback for the entity API.
 */
function asset_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer asset types', $account);
}


/**
 * Gets an array of all asset types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return AssetType[]
 *   Depending whether $type isset, an array of asset types or a single one.
 */
function asset_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our asset entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('asset_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a asset type by string.
 *
 * @param $type
 *   The machine-readable name of a asset type to load.
 * @return
 *   A asset type array or FALSE if $type does not exist.
 */
function asset_type_load($type) {
  return asset_get_types($type);
}


/**
 * Fetch a asset object. Make sure that the wildcard you choose
 * in the asset entity definition fits the function name here.
 *
 * @param $id
 *   Integer specifying the asset id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $asset object or FALSE if it cannot be loaded.
 *
 * @see asset_load_multiple()
 */
function asset_load($id, $reset = FALSE) {
  $assets = asset_load_multiple(array($id), array(), $reset);
  return reset($assets);
}


/**
 * Load multiple assets based on certain conditions.
 *
 * @param $ids
 *   An array of asset IDs.
 * @param $conditions
 *   An array of conditions to match against the {asset} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of asset objects, indexed by id.
 *
 * @see entity_load()
 * @see asset_load()
 */
function asset_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('asset', $ids, $conditions, $reset);
}


/**
 * Deletes a asset.
 */
function asset_delete(Asset $asset) {
  $asset->delete();
}


/**
 * Delete multiple assets.
 *
 * @param $ids
 *   An array of asset IDs.
 */
function asset_delete_multiple(array $ids) {
  entity_get_controller('asset')->delete($ids);
}


/**
 * Create a asset object.
 */
function asset_create($values = array()) {
  return entity_get_controller('asset')->create($values);
}


/**
 * Saves a asset to the database.
 *
 * @param $asset
 *   The asset object.
 */
function asset_save(Asset $asset) {
  return $asset->save();
}


/**
 * Saves a asset type to the db.
 */
function asset_type_save(AssetType $type) {
  $type->save();
}


/**
 * Deletes a asset type from the db.
 */
function asset_type_delete(AssetType $type) {
  $type->delete();
}


/**
 * URI callback for assets
 */
function asset_uri(Asset $asset){
  return array(
    'path' => 'asset/' . $asset->id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function asset_page_title(Asset $asset){
  return $asset->name;
}


/**
 * Sets up content to show an individual asset
 * @todo - get rid of drupal_set_title();
 */
function asset_page_view($asset, $view_mode = 'full') {
  drupal_set_title($asset->name);
  $content = asset_render($asset, $view_mode = 'full');
  return $content;
}


/**
 * Sets up content to show an individual asset
 * @todo - get rid of drupal_set_title();
 */
function asset_render($asset, $view_mode = 'full') {
  $controller = entity_get_controller('asset');
  $content = $controller->view(array($asset->id => $asset));
  return $content;
}


/**
 * Implements hook_views_api().
 */
function asset_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'asset') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function asset_theme() {
  return array(
    'asset_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'asset.admin.inc',
    ),
    'asset' => array(
      'render element' => 'elements',
      'template' => 'asset',
    ),
  );
}


/**
 * Implements hook_menu_local_tasks_alter().
 */
function asset_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/assets/add' on 'admin/structure/assets'.
  if ($root_path == 'admin/content/assets') {
    $item = menu_get_item('admin/content/assets/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * The class used for asset entities
 */
class Asset extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'asset');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'asset/' . $this->id);
  }


}


/**
 * The class used for asset type entities
 */
class AssetType extends Entity {

  public $type;
  public $label;

  public function __construct($values = array()) {
    parent::__construct($values, 'asset_type');
  }

}


/**
 * The Controller for Asset entities
 */
class AssetController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a asset - we first set up the values that are specific
   * to our asset schema but then also go through the EntityAPIController
   * function.
   *
   * @param $type
   *   The machine-readable type of the asset.
   *
   * @return
   *   A asset object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Asset
    $values += array(
      'id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );

    $asset = parent::create($values);
    return $asset;
  }

  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    return $content;
  }

}


/**
 * The Controller for Asset entities
 */
class AssetTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

   /**
   * Create a asset type - we first set up the values that are specific
   * to our asset type schema but then also go through the EntityAPIController
   * function.
   *
   * @param $type
   *   The machine-readable type of the asset.
   *
   * @return
   *   A asset type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Asset
    $values += array(
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $asset_type = parent::create($values);
    return $asset_type;
  }

}
