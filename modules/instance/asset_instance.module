<?php



/**
 * Gets an array of all asset instances, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return AssetType[]
 *   Depending whether $type isset, an array of asset instances or a single one.
 */
function asset_get_instances($id = NULL) {
  // entity_load will get the Entity controller for our asset entity and call the load
  // function of that object - we are loading entities by name here.
  $instances = entity_load('asset_instance', isset($id) ? array($id) : FALSE);
  return isset($type_name) ? reset($instances) : $instances;
}


/**
 * Menu argument loader; Load a asset type by string.
 *
 * @param $type
 *   The machine-readable name of a asset type to load.
 * @return
 *   A asset type array or FALSE if $type does not exist.
 */
function asset_instance_load($id) {
  $instance = asset_get_instances($id);
  return empty($instance[$id]) ? NULL : $instance[$id];
}


function asset_instance_load_with_type($id, $asset_type) {
  $instance = asset_instance_load($id);
  if(empty($instance) || (!empty($instance) && $instance->type !== $asset_type)){
    $instance = asset_instance_create(array('type' => $asset_type));
  }
  return $instance;
}


/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * instances of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function asset_instance_entity_info() {
  // The entity that holds information about the entity instances
  $return['asset_instance'] = array(
    'label' => t('Asset Instance'),
    'entity class' => 'AssetInstance',
    'controller class' => 'AssetInstanceController',
    'base table' => 'asset_instance',
    'fieldable' => FALSE,
    // 'bundle of' => 'asset_instance',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
    ),
    'access callback' => 'asset_instance_access',
    'module' => 'asset_instance',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/asset_instances',
      'file' => 'asset_instance.admin.inc',
      'controller class' => 'AssetInstanceUIController',
    ),
  );

  return $return;
}


/**
 * Access callback for the entity API.
 */
function asset_instance_access($op, $type = NULL, $account = NULL) {
  return user_access('administer asset instances', $account);
}


/**
 * The class used for asset instance entities
 */
class AssetInstance extends Entity {

  public $type;

  public function __construct($values = array()) {
    parent::__construct($values, 'asset_instance');
  }

}


/**
 * The Controller for Asset entities
 */
class AssetInstanceController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

   /**
   * Create a asset type - we first set up the values that are specific
   * to our asset type schema but then also go through the EntityAPIController
   * function.
   *
   * @param $type
   *   The machine-readable type of the asset.
   *
   * @return
   *   A asset type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Asset
    $values += array(
      'id' => 0,
      'is_new' => TRUE,
      'data' => array(),
    );
    if(isset($values['type'])){
      $active = asset_instance_get_active($values['type']);
      foreach($active as $instance_type => $settings){
        $handler = asset_instance_get_handler('instance', $instance_type);
        $asset_type = asset_type_load($values['type']);
        $values['data'] += $handler->defaults($asset_type->data['instances'][$instance_type]);
      }
      // Merge asset default overrides
      $values['data'] = array_merge($values['data'], variable_get('asset_' . $values['type'] . '_defaults', array()));
    }
    $asset_instance = parent::create($values);
    return $asset_instance;
  }

}

/**
 * Replace all tokens with their matching assets.
 */
function asset_instance_token_replace($text, $view_mode = 'full'){
  $assets = asset_token_find($text, TRUE);
  foreach($assets as $aid => $vars){
    $instance = asset_instance_load_with_type($vars['iid'], $vars['asset']->type);
    $view = asset_instance_render($vars['asset'], $instance);
    $text = str_replace($vars['token'], drupal_render($view), $text);
  }
  return $text;
}

// /**
//  * Sets up content to show an individual asset
//  */
function asset_instance_render($asset, $instance = NULL, $view_mode = 'full') {
  // Add instance into asset object
  $asset->instance = $instance;

  $controller = entity_get_controller('asset');
  $output = $controller->view(array($asset->id => $asset));

  return $output;
}

/**
 * Makes a CSS file available via Javascript
 */
function asset_instance_add_css($filepath){
  $css = &drupal_static(__FUNCTION__, array());
  if(empty($css[$filepath])){
    drupal_add_css($filepath);
    drupal_add_js(array('exoInstance' => array('css' => array($filepath))), 'setting');
    $css[$filepath] = TRUE;
  }
}


/**
 * Preprocess asset entities
 */
function asset_instance_preprocess_entity(&$vars) {
  if(empty($vars['asset']) || empty($vars['asset']->instance)) return;


  $asset = $vars['asset'];
  $instance = $asset->instance;
  $plugins = asset_instance_get_plugin('instance');

  // Process instance settings
  if($active = asset_instance_get_active($asset->type)){
    foreach($active as $instance_type => $settings){
      if(!empty($plugins[$instance_type]['css_display'])){
        $css = drupal_get_path('module', $plugins[$instance_type]['module']) . '/' . $plugins[$instance_type]['css_display'];
        if(empty($asset->preview)){
          drupal_add_css($css);
        }else{
          // If the asset is in preview mode, we need to make this CSS file available via javascript.
          asset_instance_add_css($css);
        }
      }
      $handler = asset_instance_get_handler('instance', $instance_type);
      $data = !empty($instance->data) ? $instance->data : NULL;
      $method = !empty($asset->preview) ? 'instance_render_preview' : 'instance_render';
      $handler->{$method}($vars, $data, $settings);
    }
  }
  // Add classes defined on entity output
  // if(!empty($vars['elements']['#classes_array'])){
  //   $vars['classes_array'] = array_merge($vars['classes_array'],$vars['elements']['#classes_array']);
  // }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function asset_instance_form_asset_type_form_alter(&$form, &$form_state, $form_id){
  $asset_type = $form_state['asset_type'];

  $plugins = asset_instance_get_plugin('instance');
  usort($plugins, 'drupal_sort_weight');
  if(!empty($plugins)){
    $form['data']['instances'] = array(
      '#tree' => TRUE,
      '#access' => FALSE,
      '#type' => 'fieldset',
      '#title' => t('Instance options'),
      '#description' => t('An asset can have instance settings. These settings allow changes per asset on an individual implementation.') . '<hr /><br />',
    );
    foreach($plugins as $plugin){
      $handler = asset_instance_get_handler('instance', $plugin['name']);

      $form['data']['instances'][$plugin['name']] = array(
        '#type' => 'checkbox',
        '#title' => $plugin['title'],
        '#default_value' => empty($asset_type->data['instances'][$plugin['name']]) ? 0 : 1,
        '#description' => !empty($plugin['description']) ? $plugin['description'] : NULL,
      );

      $settings_defaults = !empty($asset_type->data['instances'][$plugin['name']]) ? $asset_type->data['instances'][$plugin['name']] : array();
      $settings_form = array();
      $handler->settings_form($settings_form, $form_state, $settings_defaults);
      if(!empty($settings_form)){

        $form['data']['instances'][$plugin['name'].'_settings'] = array(
          '#tree' => TRUE,
          '#type' => 'fieldset',
          '#title' => $plugin['title'] . ' ' . t('Settings'),
        );

        $form['data']['instances'][$plugin['name'].'_settings']['#states'] = array(
          'visible' => array(
            ':input[name="data[instances]['.$plugin['name'].']"]' => array('checked' => TRUE),
          ),
        );

        $form['data']['instances'][$plugin['name'].'_settings'] += $settings_form;

      }

      $form['data']['instances']['#access'] = TRUE;
    }
    $form['#validate'][] = 'asset_instance_type_form_alter_validate';
  }
}

/**
 * Form API validate callback for the type form.
 */
function asset_instance_type_form_alter_validate(&$form, &$form_state) {
  if(@is_array($form_state['values']['data']['instances'])){
    foreach($form_state['values']['data']['instances'] as $key => &$value){
      if($value === 1){
        // If instance is active, merge settings with primary key.
        if(isset($form_state['values']['data']['instances'][$key . '_settings'])){
          $value = $form_state['values']['data']['instances'][$key . '_settings'];
          unset($form_state['values']['data']['instances'][$key . '_settings']);
        }
      }else{
        // If instance settings aren't active, remove instance.
        unset($form_state['values']['data']['instances'][$key]);
        unset($form_state['values']['data']['instances'][$key . '_settings']);
      }
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function asset_instance_form_field_ui_display_overview_form_alter(&$form, &$form_state){
  if($form['#entity_type'] == 'asset'){
    $form['asset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Asset Defaults'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE
    );
    $fieldset = &$form['asset'];
    $instance_type = $form['#bundle'];

    // $form['asset']['asset'] = '';
    module_load_include('inc', 'asset_instance', 'asset_instance.admin');
    $instance = asset_instance_load_with_type(0, $instance_type);
    $instance->lock = true;
    asset_instance_form_fields($fieldset, $instance, $instance_type);
    $form['#submit'][] = 'asset_instance_form_field_ui_display_overview_form_alter_submit';
  }
}

function asset_instance_form_field_ui_display_overview_form_alter_submit($form, &$form_state){
  if(!empty($form_state['values']['asset'])){
    variable_set('asset_'.$form['#bundle'].'_defaults', $form_state['values']['asset']);
  }
}


/**
 * Create a asset object.
 */
function asset_instance_create($values = array()) {
  return entity_get_controller('asset_instance')->create($values);
}


/**
 * Saves a asset type to the db.
 */
function asset_instance_save(AssetType $type) {
  $type->save();
}


/**
 * Deletes a asset type from the db.
 */
function asset_instance_delete(AssetType $type) {
  $type->delete();
}


/**
* Implements hook_ctools_plugin_directory().
*/
function asset_instance_ctools_plugin_directory($module, $plugin) {
  if ($module == 'asset_instance') {
    return 'plugins/' . $plugin;
  }
}

/**
* Implements hook_ctools_plugin_type().
*
* Has plenty options. See ctools/help/plugins-creating.html
*/
function asset_instance_ctools_plugin_type() {
  $plugins = array(
    'instance' => array(
      'classes' => array('class'),
    ),
  );
  drupal_alter('asset_instance_plugin_instances', $plugins);
  return $plugins;
}

/**
 * Fetch metadata for one asset_instance plugin by the given name.
 */
function asset_instance_get_plugin($plugin_name) {
  ctools_include('plugins');
  $plugin = ctools_get_plugins('asset_instance', $plugin_name);
  // If you alter the plugin handler, be sure the new handler is registerd or
  // you include it in some other way.
  drupal_alter('asset_instance_plugin', $plugin);
  return $plugin;
}

/**
 * Fetch active instances plugins by asset type
 */
function asset_instance_get_active($asset_type){
  $bundle = asset_type_load($asset_type);
  return empty($bundle->data['instances']) ? array() : array_filter($bundle->data['instances']);
}

/**
* Get the links handlers.
*
* @param $handler
* The links handler name.
*/
function asset_instance_get_handler($type, $name) {
  $object_cache = drupal_static(__FUNCTION__);
  if (!isset($object_cache[$name])) {
    ctools_include('plugins');
    $class = ctools_plugin_load_class('asset_instance', $type, $name, 'class');
    $class = class_exists($class) ? $class : 'AssetInstance_'.ucfirst($type).'Handler_Broken';
    $all_args = func_get_args();
    $args = array_slice($all_args, 2);
    $object_cache[$name] = new $class($name, $args);
  }

  return $object_cache[$name];
}
